<?xml version="1.0" encoding="UTF-8"?>

<!-- Generated by maven-plugin-tools 3.4 on 2016-05-04 -->

<plugin>
  <name>Apache Maven JAR Plugin</name>
  <description>Builds a Java Archive (JAR) file from the compiled project classes and resources.</description>
  <groupId>org.apache.maven.plugins</groupId>
  <artifactId>maven-jar-plugin</artifactId>
  <version>3.0.0</version>
  <goalPrefix>jar</goalPrefix>
  <mojos>
    <mojo>
      <goal>help</goal>
      <description>Display help information on maven-jar-plugin.
Call mvn jar:help -Ddetail=true -Dgoal=&lt;goal-name&gt; to display parameter details.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.apache.maven.plugins.jar.HelpMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>detail</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If true, display all settable properties for each goal.</description>
        </parameter>
        <parameter>
          <name>goal</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the goal for which to show help. If unspecified, all goals will be displayed.</description>
        </parameter>
        <parameter>
          <name>indentSize</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The number of spaces per indentation level, should be positive.</description>
        </parameter>
        <parameter>
          <name>lineLength</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The maximum length of a display line, should be positive.</description>
        </parameter>
      </parameters>
      <configuration>
        <detail implementation="boolean" default-value="false">${detail}</detail>
        <goal implementation="java.lang.String">${goal}</goal>
        <indentSize implementation="int" default-value="2">${indentSize}</indentSize>
        <lineLength implementation="int" default-value="80">${lineLength}</lineLength>
      </configuration>
    </mojo>
    <mojo>
      <goal>jar</goal>
      <description>Build a JAR from the current project.</description>
      <requiresDependencyResolution>runtime</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>package</phase>
      <implementation>org.apache.maven.plugins.jar.JarMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>archive</name>
          <type>org.apache.maven.archiver.MavenArchiveConfiguration</type>
          <required>false</required>
          <editable>true</editable>
          <description>The archive configuration to use. See Maven Archiver Reference.</description>
        </parameter>
        <parameter>
          <name>classesDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Directory containing the classes and resource files that should be packaged into the JAR.</description>
        </parameter>
        <parameter>
          <name>classifier</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Classifier to add to the artifact generated. If given, the artifact will be attached as a supplemental artifact. If not given this will create the main artifact which is the default behavior. If you try to do that a second time without using a classifier the build will fail.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of files to exclude. Specified as fileset patterns which are relative to the input directory whose contents is being packaged into the JAR.</description>
        </parameter>
        <parameter>
          <name>forceCreation</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Require the jar plugin to build a new JAR even if none of the contents appear to have changed. By default, this plugin looks to see if the output jar exists and inputs have not changed. If these conditions are true, the plugin skips creation of the jar. This does not work when other plugins, like the maven-shade-plugin, are configured to post-process the jar. This plugin can not detect the post-processing, and so leaves the post-processed jar in place. This can lead to failures when those plugins do not expect to find their own output as an input. Set this parameter to true to avoid these problems by forcing this plugin to recreate the jar every time.
Starting with 3.0.0 the property has been renamed from jar.forceCreation to maven.jar.forceCreation.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of files to include. Specified as fileset patterns which are relative to the input directory whose contents is being packaged into the JAR.</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Directory containing the generated JAR.</description>
        </parameter>
        <parameter>
          <name>skipIfEmpty</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Skip creating empty archives.</description>
        </parameter>
        <parameter>
          <name>useDefaultManifestFile</name>
          <type>boolean</type>
          <deprecated>For version 3.0.0 this parameter is only defined here to break the build if you use it!</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Using this property will fail your build cause it has been removed from the plugin configuration. See the Major Version Upgrade to version 3.0.0 for the plugin.</description>
        </parameter>
      </parameters>
      <configuration>
        <classesDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <forceCreation implementation="boolean" default-value="false">${maven.jar.forceCreation}</forceCreation>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <skipIfEmpty implementation="boolean" default-value="false"/>
        <useDefaultManifestFile implementation="boolean" default-value="false">${jar.useDefaultManifestFile}</useDefaultManifestFile>
      </configuration>
    </mojo>
    <mojo>
      <goal>test-jar</goal>
      <description>Build a JAR of the test classes for the current project.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>package</phase>
      <implementation>org.apache.maven.plugins.jar.TestJarMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>archive</name>
          <type>org.apache.maven.archiver.MavenArchiveConfiguration</type>
          <required>false</required>
          <editable>true</editable>
          <description>The archive configuration to use. See Maven Archiver Reference.</description>
        </parameter>
        <parameter>
          <name>classifier</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Classifier to used for test-jar.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of files to exclude. Specified as fileset patterns which are relative to the input directory whose contents is being packaged into the JAR.</description>
        </parameter>
        <parameter>
          <name>forceCreation</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Require the jar plugin to build a new JAR even if none of the contents appear to have changed. By default, this plugin looks to see if the output jar exists and inputs have not changed. If these conditions are true, the plugin skips creation of the jar. This does not work when other plugins, like the maven-shade-plugin, are configured to post-process the jar. This plugin can not detect the post-processing, and so leaves the post-processed jar in place. This can lead to failures when those plugins do not expect to find their own output as an input. Set this parameter to true to avoid these problems by forcing this plugin to recreate the jar every time.
Starting with 3.0.0 the property has been renamed from jar.forceCreation to maven.jar.forceCreation.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of files to include. Specified as fileset patterns which are relative to the input directory whose contents is being packaged into the JAR.</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Directory containing the generated JAR.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to true to bypass test-jar generation. Its use is NOT RECOMMENDED, but quite convenient on occasion.</description>
        </parameter>
        <parameter>
          <name>skipIfEmpty</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Skip creating empty archives.</description>
        </parameter>
        <parameter>
          <name>testClassesDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Directory containing the test classes and resource files that should be packaged into the JAR.</description>
        </parameter>
        <parameter>
          <name>useDefaultManifestFile</name>
          <type>boolean</type>
          <deprecated>For version 3.0.0 this parameter is only defined here to break the build if you use it!</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Using this property will fail your build cause it has been removed from the plugin configuration. See the Major Version Upgrade to version 3.0.0 for the plugin.</description>
        </parameter>
      </parameters>
      <configuration>
        <classifier implementation="java.lang.String" default-value="tests"/>
        <forceCreation implementation="boolean" default-value="false">${maven.jar.forceCreation}</forceCreation>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <skip implementation="boolean">${maven.test.skip}</skip>
        <skipIfEmpty implementation="boolean" default-value="false"/>
        <testClassesDirectory implementation="java.io.File" default-value="${project.build.testOutputDirectory}"/>
        <useDefaultManifestFile implementation="boolean" default-value="false">${jar.useDefaultManifestFile}</useDefaultManifestFile>
      </configuration>
    </mojo>
  </mojos>
</plugin>